# Aula 47

### Exercício 1
**a.** round ou cust é um fator que esta relacionado com a seguransa da senha sendo quanto mais, mais lenta a execução,
já o salt é uma string aleatória na senha 

**b/c.** 
```
import { genSaltSync, hashSync, compareSync } from "bcryptjs"

export const createHash = (
   plainText: string 
): string => {
   const salt: string = genSaltSync(12)
   const hash: string = hashSync(plainText, salt)
   return hash
}

export const compareHash = (
   plaintText:string,
   cypherText:string
):boolean=>{
   return compareSync(plaintText, cypherText)
}
```

### Exercício 2
**a.** cadastro 

**b.**
```
import { Request, Response } from "express";
import connection from "../connection";
import { user, USER_ROLES } from "../types";
import { generateId } from "../services/idGenerator";
import { generateToken } from "../services/authenticator";
import { createHash } from "../services/hashManager";

export default async function createUser(
   req: Request,
   res: Response
): Promise<void> {
   try {

      const { name, nickname, email, password, role } = req.body

      if (!name || !nickname || !email || !password || !role) {
         res.statusCode = 422
         throw new Error("Preencha os campos 'name','nickname', 'role', 'password' e 'email'")
      }

      if(!(role in USER_ROLES)){
         throw new Error("'role' deve ser 'NORMAL' ou 'ADMIN'")
      }

      const [user] = await connection('to_do_list_users')
         .where({ email })

      if (user) {
         res.statusCode = 409
         throw new Error('Email já cadastrado')
      }

      const id: string = generateId();

      const newUser: user = {
         id,
         name,
         nickname,
         email,
         password: createHash(password),
         role
      }

      await connection('to_do_list_users')
         .insert(newUser);

      const token: string = generateToken({
         id,
         role
      });

      res.status(201).send({ newUser, token });

   } catch (error) {
      res.status(400).send({ message: error.message })
   }
}
```

**c.**
```
import { Request, Response } from "express";
import connection from "../connection";
import { generateToken } from "../services/authenticator";
import { compareHash } from "../services/hashManager";

export default async function login(
   req: Request,
   res: Response
) {

   try {
      const { email, password } = req.body;
      if (!email) {
         throw new Error("Please fill email field")
      }

      if (!password) {
         throw new Error("Please fill password field")
      }

      const queryResult = await connection.raw(`  
         SELECT * FROM to_do_list_users
         WHERE email = "${email}";
      `)

      const user = queryResult[0][0];

      if (!user) {
         throw new Error("User not found")
      }

      const passwordIsCorrect: boolean = compareHash(password, user.password)

      if (!passwordIsCorrect) {
         throw new Error("Invalid Credentials")
      }

      const token: string = generateToken({
         id: user.id,
         role: user.role
      });

      res.status(200).send({ token });

   } catch (error) {
      res.status(400).send({ error: error.message });
   }
}
```

**d.** sim devido as roles 

### Exercício 3

**a.**
```
CREATE TABLE IF NOT EXISTS to_do_list_users (
    id VARCHAR(64) PRIMARY KEY,
    name VARCHAR(64) NOT NULL,
    nickname VARCHAR(64) NOT NULL,
    email VARCHAR(64) NOT NULL,
    password VARCHAR(255) NOT NULL,
    role ENUM('NORMAL', 'ADMIN') default 'NORMAL'
);
```

**b.**
```
import * as jwt from 'jsonwebtoken';

type AuthenticationData = {
    id: string,
    role: string;
  }

const expiresIn = "1min";

export const generateToken = (input: AuthenticationData): string => {
      const token = jwt.sign({id: input.id, role: input.role},process.env.JWT_KEY as string,{expiresIn});
      return token;
};

export const getTokenData = (token: string): AuthenticationData => {
    const payload = jwt.verify(token, process.env.JWT_KEY as string) as any;
    const result = {
      id: payload.id,
      role: payload.role
    };
    return result;
  };
``` 

**c.**
```
export default async function createUser(
   req: Request,
   res: Response
): Promise<void> {
   try {

      const { name, nickname, email, password, role } = req.body

      if (!name || !nickname || !email || !password || !role) {
         res.statusCode = 422
         throw new Error("Preencha os campos 'name','nickname', 'role', 'password' e 'email'")
      }

      if(!(role in USER_ROLES)){
         throw new Error("'role' deve ser 'NORMAL' ou 'ADMIN'")
      }

      const [user] = await connection('to_do_list_users')
         .where({ email })

      if (user) {
         res.statusCode = 409
         throw new Error('Email já cadastrado')
      }

      const id: string = generateId();

      const newUser: user = {
         id,
         name,
         nickname,
         email,
         password: createHash(password),
         role
      }

      await connection('to_do_list_users')
         .insert(newUser);

      const token: string = generateToken({
         id,
         role
      });

      res.status(201).send({ newUser, token });

   } catch (error) {
      res.status(400).send({ message: error.message })
   }
}
```

**d.** 
```
import { Request, Response } from "express";
import connection from "../connection";
import { generateToken } from "../services/authenticator";
import { compareHash } from "../services/hashManager";

export default async function login(
   req: Request,
   res: Response
) {

   try {
      const { email, password } = req.body;
      if (!email) {
         throw new Error("Please fill email field")
      }

      if (!password) {
         throw new Error("Please fill password field")
      }

      const queryResult = await connection.raw(`  
         SELECT * FROM to_do_list_users
         WHERE email = "${email}";
      `)

      const user = queryResult[0][0];

      if (!user) {
         throw new Error("User not found")
      }

      const passwordIsCorrect: boolean = compareHash(password, user.password)

      if (!passwordIsCorrect) {
         throw new Error("Invalid Credentials")
      }

      const token: string = generateToken({
         id: user.id,
         role: user.role
      });

      res.status(200).send({ token });

   } catch (error) {
      res.status(400).send({ error: error.message });
   }
}
```

### Exercício 3

**a**
```    if (authenticationData.role !== "normal") {
      throw new Error("Only a normal user can access this funcionality");
    }
```